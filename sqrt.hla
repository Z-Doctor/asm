program sqrt;
#include( "stdin.hhf" )
#include( "stdout.hhf" )

static
	input: int32;
	sqroot: int32;

begin sqrt;
stdout.put("Enter -1 to exit" nl);
pickNumber:
	forever
		try
			stdout.put("Input = ");
			stdin.get(input);	
		unprotected
			if(input > 0 || input == -1) then
				break;
			else
				stdout.put("Input must be greater than 0", nl);
			endif;
		anyexception
			stdout.put("Error Code: ", eax, nl);
			stdout.put("Try again" nl);
		endtry;
	endfor;
	
	cmp(input, -1);
	je stop;
	
	mov(input, eax);
	mov(0, bx);
		
// Finds the MSB position
msbCheck:
	cmp(eax, 0);
	jne msbLoop;
	jmp padMsb;
msbLoop:	
	shr(1, eax);
	inc(bx);
	jmp msbCheck;
		
// Pads to nearest 2
// 0's out edx for 32 bit division
// Divides by 2
// Takes the remainder (if any) and adds it to eax
// Multiplies eax by 2 in ebx
padMsb:
	mov(bx, ax);
	cwde();
	xor(edx, edx);
	mov(2, ebx);
	div(ebx);
	add(edx, eax);
	mul(ebx);
	mov(ax, bx);
	mov(0, ecx);
	mov(0, edx);
	mov(0, sqroot);
// Goes through the procress of shifting by 2 to get the sqaure root
calcSqrt:
	sub(2, bx);
	//cmp(bx, $7FFF);
	cmp(bx, 0);
	jnge printResult;
	mov(input, eax);
		
	// Shifts over bx amount of spaces and isolates them
	cmp(bx, 0);
	jng calcSqrt1;
	push(bx);
	shift:
		shr(2, eax);
		sub(2, bx);
		cmp(bx, 0);
		jg shift;
		pop(bx);
	// Binary division
	calcSqrt1:
		and(3, eax);
		shl(1, edx);
		shl(1, ecx);
		or(1, ecx);	
		or(sqroot, eax);	
		cmp(eax, ecx);
		jnge calcSqrt2;
		or(1, edx);
		sub(ecx, eax);
		shl(2, eax);
		mov(eax, sqroot);	
		inc(ecx);
		jmp calcSqrt;
		
		calcSqrt2:
			xor(1, ecx);
			shl(2, eax);
			mov(eax, sqroot);
	jmp calcSqrt;
printResult:
	mov(edx, sqroot);	
	stdout.put("The sqrt of '", input, " is '", sqroot, "'" nl);	
	jmp pickNumber;
stop:
end sqrt;
